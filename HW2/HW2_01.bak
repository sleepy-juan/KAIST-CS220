#lang racket

(define (product term a next b)
  (if (> a b)
      1
      (* (term a) (product term (next a) next b))))

(define (factorial n) (product (lambda (x) x) 1 (lambda (x) (+ x 1)) n))

(define (pi-product n)
  (* 4.0
  (/ (product (lambda (x) (+ 2 (* 2 (floor (/ x 2))))) 1 (lambda (x) (+ x 1)) n)
     (product (lambda (x) (+ 1 (* 2 (ceiling (/ x 2))))) 1 (lambda (x) (+ x 1)) n))))

(define (iterative-product term a next b)
  (define (iter-product a val)
    (if (> a b)
        val
        (iter-product (next a) (* val (term a)))))
  (iter-product a 1))