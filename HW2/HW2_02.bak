#lang racket

(define (accumulate combiner null-value term a next b)
  (define (iter a val)
    (if (> a b)
        val
        (iter (next a) (combiner val (term a)))))
  (iter a null-value))

(define (sum term a next b)
  (accumulate (lambda (x y) (+ x y)) 0 term a next b))

(define (product term a next b)
  (accumulate (lambda (x y) (* x y)) 1 term a next b))