#lang racket
;;================================
; cs220 Spring 2017, hw6-code.scm
;;================================
;
(define nil '())

(define (write-line term)
  (begin (display term)
         (newline)))
;;; some basic stream operations

(define (stream-map proc stream)
  (if (stream-empty? stream)
      empty-stream
      (stream-cons (proc (stream-first stream))
                   (stream-map proc (stream-rest stream)))))

(define (add-streams s1 s2)
  (cond ((stream-empty? s1) s2)
        ((stream-empty? s2) s1)
        (else
         (stream-cons (+ (stream-first s1) (stream-first s2))
                      (add-streams (stream-rest s1)
                                   (stream-rest s2))))))

(define (scale-stream c stream)
  (stream-map (lambda (x) (* x c)) stream))

;;; power series operations

(define add-series add-streams)

(define scale-series scale-stream)

(define (negate-series s)
  (scale-series -1 s))

(define (subtract-series s1 s2)
  (add-series s1 (negate-series s2)))

;;; display the first n coefficients of a series

(define (show-series s nterms)
  (if (= nterms 0)
      'done
      (begin (write-line (stream-first s))
             (show-series (stream-rest s) (- nterms 1)))))

;;; return the coefficient of x^n

(define (series-coeff s n)  (stream-ref s n))

;;; create a (finite) series from a list of coefficients

(define (coeffs->series list-of-coeffs)
  (define zeros (stream-cons 0 zeros))
  (define (iter lst)
    (if (null? lst)
        zeros
        (stream-cons (car lst)
                     (iter (cdr lst)))))
  (iter list-of-coeffs))

;;; create a series from a procedure: nth term is P(n)
;;; requires non-neg-integers to be 0,1,2,3....
(define ones (stream-cons 1 ones))

;
; Problem 1 - must be copied to as a comment
; define non-neg-integers here
; needed for Problem 1 solution

; integers-from: number -> stream
; to produce the stream of integers from the given number
; (integers-from 1) should produce the stream of natural number
(define (integers-from n)
  (stream-cons n (integers-from (+ n 1))))
; (test (stream-ref (integers-from 1) 10) 10)

(define non-neg-integers "you need to write program text to generate") 

(define (proc->series proc)
  (stream-map proc non-neg-integers))

; Exercise 1 : the definitions are copied from the class note.
(define (stream-enumerate-interval low high)
  (if (> low high)
      empty-stream
      (stream-cons
       low
       (stream-enumerate-interval (+ low 1) high))))

(define (stream-ref s n)
  (if (= n 0)
      (stream-first s)
      (stream-ref (stream-rest s) (- n 1))))

(define (display-line x)
  (newline)
  (display x))

(define (show x)
  (display-line x)
  x)

; Exercise 1

(define x (stream-map show (stream-enumerate-interval 0 10)))
; (stream-ref x 5) displays 5
; (stream-ref x 7) displays 7

; Exercise 2

; defined in the hw
; the stream of 2^n
(define A (stream-cons 1 (scale-stream 2 A)))

; mul-streams: stream, stream -> stream
; to produce a stream which index is multiples of elements in a and that in b.
; (mul-streams (stream-enumerate-interval 0 3) (stream-enumerate-interval 0 3)) should produce stream of 0, 1, 4, 9
(define (mul-streams a b)
  (stream-cons
   (* (stream-first a) (stream-first b))
   (mul-streams (stream-rest a) (stream-rest b))))
; (test (stream-ref (mul-streams (stream-enumerate-interval 0 3) (stream-enumerate-interval 0 3)) 2) 4)

; define for stream B
; integers is the stream of non-negative integers starting from 1
; copied from class note and function integers-from is defined above.
(define integers (integers-from 1))

; define B
(define B (stream-cons 1 (mul-streams B integers)))

; answer for Exercise 2

; Stream A is the stream of 2^n, where n is an index.
; 'scale-stream' multiplies 2 to the A whose first value is 1, and 'stream-cons' appends it at the end of A.
; So A is produced like: (I mark checked index by scale-stream as ')
; 1
; 1' 1*2
; 1' 1*2' 1*2*2 ...

; Stream B is the stream of n!, where n is an index except 0! is defined as 1.
; 'mul-stream' multiplies two streams index-by-index, and B is produced by multiplication of integers and B itself.
; So the index of B is defined as multiple of previous index and element with previous index.
; B is produced like: (I mark checked index by mul-streams as ')
; 1
; 1' 1*1
; 1' 1*1' 1*1*2
; 1' 1*1' 1*1*2' 1*1*2*3 ...

; Exercise 3

; stream-pairs: stream -> stream
; to produce the all sub-streams of given stream
; (stream-pairs (stream-enumerate-inteveal 1 3)) should produce stream of all pairs
(define (stream-pairs s)
  (if (stream-empty? s)
      empty-stream
      (stream-append
       (stream-map
        (lambda (sn) (list (stream-first s) sn))
        (stream-rest s))
       (stream-pairs (stream-rest s)))))
; (stream-pairs (stream-enumerate-interval 1 3)) is the stream of 6 pairs. (test with show-series)

; (a) {(1 2) (1 3) (1 4) (1 5) (2 3) (2 4) (2 5) (3 4) (3 5) (4 5)}
; (b) basically, stream-pairs works with recursion.
;     at some step of recursion, it merges two streams (stream-map ...) and recursion result with (stream-rest s)
;     (stream-map ...) makes pairs that has (stream-fisrt s) as first index, and the elements in (stream-rest s) as second index.
;     By this process, stream-pairs make all the pairs of given stream.
; (c) {(1 2) (1 3) (1 4) (1 5) (1 6) ... }
;     I guess {(1 2) (1 3) (2 3) (1 4) (2 4) (3 4) (1 5) (2 5) ...} is better for infinite stream.

(define (stream-gather s from to)
  (if (> from to)
      empty-stream
      (stream-cons (stream-ref s from) (stream-gather s (+ from 1) to))))

(define (stream-constant-pair s c)
  (stream-map (lambda (v) (list v c)) s))

(define (modified-stream-pairs s)
  (define (iter n)
    (if (= n 0)
        empty-stream
        (stream-append (iter (- n 1)) (stream-constant-pair (stream-gather s 0 (- n 1))) (stream-ref s n))))
  (iter 0))